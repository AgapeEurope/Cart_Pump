'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
Partial Public Class DonationDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertFR_Cart(instance As FR_Cart)
    End Sub
  Partial Private Sub UpdateFR_Cart(instance As FR_Cart)
    End Sub
  Partial Private Sub DeleteFR_Cart(instance As FR_Cart)
    End Sub
  Partial Private Sub InsertAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
  Partial Private Sub UpdateAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
  Partial Private Sub DeleteAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
  Partial Private Sub InsertFR_Donation(instance As FR_Donation)
    End Sub
  Partial Private Sub UpdateFR_Donation(instance As FR_Donation)
    End Sub
  Partial Private Sub DeleteFR_Donation(instance As FR_Donation)
    End Sub
  Partial Private Sub InsertFR_Cart_Content(instance As FR_Cart_Content)
    End Sub
  Partial Private Sub UpdateFR_Cart_Content(instance As FR_Cart_Content)
    End Sub
  Partial Private Sub DeleteFR_Cart_Content(instance As FR_Cart_Content)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Department(instance As AP_StaffBroker_Department)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Department(instance As AP_StaffBroker_Department)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Department(instance As AP_StaffBroker_Department)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub UpdateUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub DeleteUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub InsertProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub UpdateProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub DeleteProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub InsertAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
  Partial Private Sub UpdateAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
  Partial Private Sub DeleteAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Cart_Pump.My.MySettings.Default.AgapeConnectConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property FR_Carts() As System.Data.Linq.Table(Of FR_Cart)
		Get
			Return Me.GetTable(Of FR_Cart)
		End Get
	End Property
	
	Public ReadOnly Property Agape_Give_DonationTypes() As System.Data.Linq.Table(Of Agape_Give_DonationType)
		Get
			Return Me.GetTable(Of Agape_Give_DonationType)
		End Get
	End Property
	
	Public ReadOnly Property FR_Donations() As System.Data.Linq.Table(Of FR_Donation)
		Get
			Return Me.GetTable(Of FR_Donation)
		End Get
	End Property
	
	Public ReadOnly Property FR_Cart_Contents() As System.Data.Linq.Table(Of FR_Cart_Content)
		Get
			Return Me.GetTable(Of FR_Cart_Content)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Staffs() As System.Data.Linq.Table(Of AP_StaffBroker_Staff)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Staff)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Departments() As System.Data.Linq.Table(Of AP_StaffBroker_Department)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Department)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffProfiles() As System.Data.Linq.Table(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffProfile)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffPropertyDefinitions() As System.Data.Linq.Table(Of AP_StaffBroker_StaffPropertyDefinition)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffPropertyDefinition)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property UserProfiles() As System.Data.Linq.Table(Of UserProfile)
		Get
			Return Me.GetTable(Of UserProfile)
		End Get
	End Property
	
	Public ReadOnly Property ProfilePropertyDefinitions() As System.Data.Linq.Table(Of ProfilePropertyDefinition)
		Get
			Return Me.GetTable(Of ProfilePropertyDefinition)
		End Get
	End Property
	
	Public ReadOnly Property Agape_Give_BankTransfers() As System.Data.Linq.Table(Of Agape_Give_BankTransfer)
		Get
			Return Me.GetTable(Of Agape_Give_BankTransfer)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Settings() As System.Data.Linq.Table(Of AP_StaffBroker_Setting)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Setting)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FR_Cart")>  _
Partial Public Class FR_Cart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CartID As Long
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _AnonID As String
	
	Private _PayMethod As System.Nullable(Of Byte)
	
	Private _TransLog As String
	
	Private _MerchantFee As System.Nullable(Of Decimal)
	
	Private _CreditFee As System.Nullable(Of Decimal)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _UserComments As String
	
	Private _StaffComments As String
	
	Private _OrderState As System.Nullable(Of Byte)
	
	Private _ShipCost As System.Nullable(Of Decimal)
	
	Private _DeliveryInst As String
	
	Private _PortalID As System.Nullable(Of Integer)
	
	Private _ShipAddressBookID As System.Nullable(Of Long)
	
	Private _ShipCompany As String
	
	Private _ShipReference As String
	
	Private _CreditNote As System.Nullable(Of Boolean)
	
	Private _ShipVAT As System.Nullable(Of Decimal)
	
	Private _BillAddressBookID As System.Nullable(Of Long)
	
	Private _FR_Cart_Contents As EntitySet(Of FR_Cart_Content)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCartIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCartIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnAnonIDChanging(value As String)
    End Sub
    Partial Private Sub OnAnonIDChanged()
    End Sub
    Partial Private Sub OnPayMethodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnPayMethodChanged()
    End Sub
    Partial Private Sub OnTransLogChanging(value As String)
    End Sub
    Partial Private Sub OnTransLogChanged()
    End Sub
    Partial Private Sub OnMerchantFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMerchantFeeChanged()
    End Sub
    Partial Private Sub OnCreditFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCreditFeeChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnUserCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnUserCommentsChanged()
    End Sub
    Partial Private Sub OnStaffCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnStaffCommentsChanged()
    End Sub
    Partial Private Sub OnOrderStateChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnOrderStateChanged()
    End Sub
    Partial Private Sub OnShipCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnShipCostChanged()
    End Sub
    Partial Private Sub OnDeliveryInstChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryInstChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnShipAddressBookIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnShipAddressBookIDChanged()
    End Sub
    Partial Private Sub OnShipCompanyChanging(value As String)
    End Sub
    Partial Private Sub OnShipCompanyChanged()
    End Sub
    Partial Private Sub OnShipReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnShipReferenceChanged()
    End Sub
    Partial Private Sub OnCreditNoteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCreditNoteChanged()
    End Sub
    Partial Private Sub OnShipVATChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnShipVATChanged()
    End Sub
    Partial Private Sub OnBillAddressBookIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBillAddressBookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FR_Cart_Contents = New EntitySet(Of FR_Cart_Content)(AddressOf Me.attach_FR_Cart_Contents, AddressOf Me.detach_FR_Cart_Contents)
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CartID() As Long
		Get
			Return Me._CartID
		End Get
		Set
			If ((Me._CartID = value)  _
						= false) Then
				Me.OnCartIDChanging(value)
				Me.SendPropertyChanging
				Me._CartID = value
				Me.SendPropertyChanged("CartID")
				Me.OnCartIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnonID", DbType:="VarChar(300)")>  _
	Public Property AnonID() As String
		Get
			Return Me._AnonID
		End Get
		Set
			If (String.Equals(Me._AnonID, value) = false) Then
				Me.OnAnonIDChanging(value)
				Me.SendPropertyChanging
				Me._AnonID = value
				Me.SendPropertyChanged("AnonID")
				Me.OnAnonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PayMethod", DbType:="TinyInt")>  _
	Public Property PayMethod() As System.Nullable(Of Byte)
		Get
			Return Me._PayMethod
		End Get
		Set
			If (Me._PayMethod.Equals(value) = false) Then
				Me.OnPayMethodChanging(value)
				Me.SendPropertyChanging
				Me._PayMethod = value
				Me.SendPropertyChanged("PayMethod")
				Me.OnPayMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransLog", DbType:="NVarChar(MAX)")>  _
	Public Property TransLog() As String
		Get
			Return Me._TransLog
		End Get
		Set
			If (String.Equals(Me._TransLog, value) = false) Then
				Me.OnTransLogChanging(value)
				Me.SendPropertyChanging
				Me._TransLog = value
				Me.SendPropertyChanged("TransLog")
				Me.OnTransLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantFee", DbType:="Money")>  _
	Public Property MerchantFee() As System.Nullable(Of Decimal)
		Get
			Return Me._MerchantFee
		End Get
		Set
			If (Me._MerchantFee.Equals(value) = false) Then
				Me.OnMerchantFeeChanging(value)
				Me.SendPropertyChanging
				Me._MerchantFee = value
				Me.SendPropertyChanged("MerchantFee")
				Me.OnMerchantFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditFee", DbType:="Money")>  _
	Public Property CreditFee() As System.Nullable(Of Decimal)
		Get
			Return Me._CreditFee
		End Get
		Set
			If (Me._CreditFee.Equals(value) = false) Then
				Me.OnCreditFeeChanging(value)
				Me.SendPropertyChanging
				Me._CreditFee = value
				Me.SendPropertyChanged("CreditFee")
				Me.OnCreditFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserComments", DbType:="NVarChar(MAX)")>  _
	Public Property UserComments() As String
		Get
			Return Me._UserComments
		End Get
		Set
			If (String.Equals(Me._UserComments, value) = false) Then
				Me.OnUserCommentsChanging(value)
				Me.SendPropertyChanging
				Me._UserComments = value
				Me.SendPropertyChanged("UserComments")
				Me.OnUserCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffComments", DbType:="NVarChar(MAX)")>  _
	Public Property StaffComments() As String
		Get
			Return Me._StaffComments
		End Get
		Set
			If (String.Equals(Me._StaffComments, value) = false) Then
				Me.OnStaffCommentsChanging(value)
				Me.SendPropertyChanging
				Me._StaffComments = value
				Me.SendPropertyChanged("StaffComments")
				Me.OnStaffCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderState", DbType:="TinyInt")>  _
	Public Property OrderState() As System.Nullable(Of Byte)
		Get
			Return Me._OrderState
		End Get
		Set
			If (Me._OrderState.Equals(value) = false) Then
				Me.OnOrderStateChanging(value)
				Me.SendPropertyChanging
				Me._OrderState = value
				Me.SendPropertyChanged("OrderState")
				Me.OnOrderStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCost", DbType:="Money")>  _
	Public Property ShipCost() As System.Nullable(Of Decimal)
		Get
			Return Me._ShipCost
		End Get
		Set
			If (Me._ShipCost.Equals(value) = false) Then
				Me.OnShipCostChanging(value)
				Me.SendPropertyChanging
				Me._ShipCost = value
				Me.SendPropertyChanged("ShipCost")
				Me.OnShipCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryInst", DbType:="NVarChar(MAX)")>  _
	Public Property DeliveryInst() As String
		Get
			Return Me._DeliveryInst
		End Get
		Set
			If (String.Equals(Me._DeliveryInst, value) = false) Then
				Me.OnDeliveryInstChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryInst = value
				Me.SendPropertyChanged("DeliveryInst")
				Me.OnDeliveryInstChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int")>  _
	Public Property PortalID() As System.Nullable(Of Integer)
		Get
			Return Me._PortalID
		End Get
		Set
			If (Me._PortalID.Equals(value) = false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddressBookID", DbType:="BigInt")>  _
	Public Property ShipAddressBookID() As System.Nullable(Of Long)
		Get
			Return Me._ShipAddressBookID
		End Get
		Set
			If (Me._ShipAddressBookID.Equals(value) = false) Then
				Me.OnShipAddressBookIDChanging(value)
				Me.SendPropertyChanging
				Me._ShipAddressBookID = value
				Me.SendPropertyChanged("ShipAddressBookID")
				Me.OnShipAddressBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCompany", DbType:="NVarChar(50)")>  _
	Public Property ShipCompany() As String
		Get
			Return Me._ShipCompany
		End Get
		Set
			If (String.Equals(Me._ShipCompany, value) = false) Then
				Me.OnShipCompanyChanging(value)
				Me.SendPropertyChanging
				Me._ShipCompany = value
				Me.SendPropertyChanged("ShipCompany")
				Me.OnShipCompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipReference", DbType:="NVarChar(50)")>  _
	Public Property ShipReference() As String
		Get
			Return Me._ShipReference
		End Get
		Set
			If (String.Equals(Me._ShipReference, value) = false) Then
				Me.OnShipReferenceChanging(value)
				Me.SendPropertyChanging
				Me._ShipReference = value
				Me.SendPropertyChanged("ShipReference")
				Me.OnShipReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditNote", DbType:="Bit")>  _
	Public Property CreditNote() As System.Nullable(Of Boolean)
		Get
			Return Me._CreditNote
		End Get
		Set
			If (Me._CreditNote.Equals(value) = false) Then
				Me.OnCreditNoteChanging(value)
				Me.SendPropertyChanging
				Me._CreditNote = value
				Me.SendPropertyChanged("CreditNote")
				Me.OnCreditNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipVAT", DbType:="Money")>  _
	Public Property ShipVAT() As System.Nullable(Of Decimal)
		Get
			Return Me._ShipVAT
		End Get
		Set
			If (Me._ShipVAT.Equals(value) = false) Then
				Me.OnShipVATChanging(value)
				Me.SendPropertyChanging
				Me._ShipVAT = value
				Me.SendPropertyChanged("ShipVAT")
				Me.OnShipVATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillAddressBookID", DbType:="BigInt")>  _
	Public Property BillAddressBookID() As System.Nullable(Of Long)
		Get
			Return Me._BillAddressBookID
		End Get
		Set
			If (Me._BillAddressBookID.Equals(value) = false) Then
				Me.OnBillAddressBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BillAddressBookID = value
				Me.SendPropertyChanged("BillAddressBookID")
				Me.OnBillAddressBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FR_Cart_FR_Cart_Content", Storage:="_FR_Cart_Contents", ThisKey:="CartID", OtherKey:="CartID")>  _
	Public Property FR_Cart_Contents() As EntitySet(Of FR_Cart_Content)
		Get
			Return Me._FR_Cart_Contents
		End Get
		Set
			Me._FR_Cart_Contents.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_FR_Cart", Storage:="_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.FR_Carts = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FR_Carts = Me
					Me._UserID = value.UserID
				Else
					Me._UserID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FR_Cart_Contents(ByVal entity As FR_Cart_Content)
		Me.SendPropertyChanging
		entity.FR_Cart = Me
	End Sub
	
	Private Sub detach_FR_Cart_Contents(ByVal entity As FR_Cart_Content)
		Me.SendPropertyChanging
		entity.FR_Cart = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Give_DonationType")>  _
Partial Public Class Agape_Give_DonationType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DonationTypeId As Integer
	
	Private _DonationTypeName As String
	
	Private _DonationTypeNumber As System.Nullable(Of Byte)
	
	Private _Visible As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonationTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDonationTypeIdChanged()
    End Sub
    Partial Private Sub OnDonationTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnDonationTypeNameChanged()
    End Sub
    Partial Private Sub OnDonationTypeNumberChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDonationTypeNumberChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DonationTypeId() As Integer
		Get
			Return Me._DonationTypeId
		End Get
		Set
			If ((Me._DonationTypeId = value)  _
						= false) Then
				Me.OnDonationTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._DonationTypeId = value
				Me.SendPropertyChanged("DonationTypeId")
				Me.OnDonationTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeName", DbType:="NVarChar(100)")>  _
	Public Property DonationTypeName() As String
		Get
			Return Me._DonationTypeName
		End Get
		Set
			If (String.Equals(Me._DonationTypeName, value) = false) Then
				Me.OnDonationTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._DonationTypeName = value
				Me.SendPropertyChanged("DonationTypeName")
				Me.OnDonationTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeNumber", DbType:="TinyInt")>  _
	Public Property DonationTypeNumber() As System.Nullable(Of Byte)
		Get
			Return Me._DonationTypeNumber
		End Get
		Set
			If (Me._DonationTypeNumber.Equals(value) = false) Then
				Me.OnDonationTypeNumberChanging(value)
				Me.SendPropertyChanging
				Me._DonationTypeNumber = value
				Me.SendPropertyChanged("DonationTypeNumber")
				Me.OnDonationTypeNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
	Public Property Visible() As System.Nullable(Of Boolean)
		Get
			Return Me._Visible
		End Get
		Set
			If (Me._Visible.Equals(value) = false) Then
				Me.OnVisibleChanging(value)
				Me.SendPropertyChanging
				Me._Visible = value
				Me.SendPropertyChanged("Visible")
				Me.OnVisibleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FR_Donations")>  _
Partial Public Class FR_Donation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DonationID As Long
	
	Private _CartContentID As Long
	
	Private _DestinationType As System.Nullable(Of Byte)
	
	Private _DestinationID As System.Nullable(Of Integer)
	
	Private _BatchID As System.Nullable(Of Long)
	
	Private _Comment As String
	
	Private _FR_Cart_Content As EntityRef(Of FR_Cart_Content)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonationIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDonationIDChanged()
    End Sub
    Partial Private Sub OnCartContentIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCartContentIDChanged()
    End Sub
    Partial Private Sub OnDestinationTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDestinationTypeChanged()
    End Sub
    Partial Private Sub OnDestinationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDestinationIDChanged()
    End Sub
    Partial Private Sub OnBatchIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBatchIDChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FR_Cart_Content = CType(Nothing, EntityRef(Of FR_Cart_Content))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DonationID() As Long
		Get
			Return Me._DonationID
		End Get
		Set
			If ((Me._DonationID = value)  _
						= false) Then
				Me.OnDonationIDChanging(value)
				Me.SendPropertyChanging
				Me._DonationID = value
				Me.SendPropertyChanged("DonationID")
				Me.OnDonationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartContentID", DbType:="BigInt NOT NULL")>  _
	Public Property CartContentID() As Long
		Get
			Return Me._CartContentID
		End Get
		Set
			If ((Me._CartContentID = value)  _
						= false) Then
				If Me._FR_Cart_Content.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCartContentIDChanging(value)
				Me.SendPropertyChanging
				Me._CartContentID = value
				Me.SendPropertyChanged("CartContentID")
				Me.OnCartContentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationType", DbType:="TinyInt")>  _
	Public Property DestinationType() As System.Nullable(Of Byte)
		Get
			Return Me._DestinationType
		End Get
		Set
			If (Me._DestinationType.Equals(value) = false) Then
				Me.OnDestinationTypeChanging(value)
				Me.SendPropertyChanging
				Me._DestinationType = value
				Me.SendPropertyChanged("DestinationType")
				Me.OnDestinationTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationID", DbType:="Int")>  _
	Public Property DestinationID() As System.Nullable(Of Integer)
		Get
			Return Me._DestinationID
		End Get
		Set
			If (Me._DestinationID.Equals(value) = false) Then
				Me.OnDestinationIDChanging(value)
				Me.SendPropertyChanging
				Me._DestinationID = value
				Me.SendPropertyChanged("DestinationID")
				Me.OnDestinationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchID", DbType:="BigInt")>  _
	Public Property BatchID() As System.Nullable(Of Long)
		Get
			Return Me._BatchID
		End Get
		Set
			If (Me._BatchID.Equals(value) = false) Then
				Me.OnBatchIDChanging(value)
				Me.SendPropertyChanging
				Me._BatchID = value
				Me.SendPropertyChanged("BatchID")
				Me.OnBatchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(MAX)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FR_Cart_Content_FR_Donation", Storage:="_FR_Cart_Content", ThisKey:="CartContentID", OtherKey:="CartContentID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property FR_Cart_Content() As FR_Cart_Content
		Get
			Return Me._FR_Cart_Content.Entity
		End Get
		Set
			Dim previousValue As FR_Cart_Content = Me._FR_Cart_Content.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FR_Cart_Content.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FR_Cart_Content.Entity = Nothing
					previousValue.FR_Donations.Remove(Me)
				End If
				Me._FR_Cart_Content.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FR_Donations.Add(Me)
					Me._CartContentID = value.CartContentID
				Else
					Me._CartContentID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("FR_Cart_Content")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FR_Cart_Content")>  _
Partial Public Class FR_Cart_Content
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CartContentID As Long
	
	Private _CartID As Long
	
	Private _ItemName As String
	
	Private _Quantity As Short
	
	Private _ItemType As System.Nullable(Of Short)
	
	Private _ItemRef As System.Nullable(Of Long)
	
	Private _Cost As Decimal
	
	Private _Tax As System.Nullable(Of Decimal)
	
	Private _DiscountAmt As System.Nullable(Of Decimal)
	
	Private _DiscountPercent As System.Nullable(Of Double)
	
	Private _Dispatchable As Boolean
	
	Private _Details As String
	
	Private _FR_Donations As EntitySet(Of FR_Donation)
	
	Private _FR_Cart As EntityRef(Of FR_Cart)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCartContentIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCartContentIDChanged()
    End Sub
    Partial Private Sub OnCartIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCartIDChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Short)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnItemTypeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnItemTypeChanged()
    End Sub
    Partial Private Sub OnItemRefChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnItemRefChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTaxChanged()
    End Sub
    Partial Private Sub OnDiscountAmtChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDiscountAmtChanged()
    End Sub
    Partial Private Sub OnDiscountPercentChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDiscountPercentChanged()
    End Sub
    Partial Private Sub OnDispatchableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDispatchableChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FR_Donations = New EntitySet(Of FR_Donation)(AddressOf Me.attach_FR_Donations, AddressOf Me.detach_FR_Donations)
		Me._FR_Cart = CType(Nothing, EntityRef(Of FR_Cart))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartContentID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CartContentID() As Long
		Get
			Return Me._CartContentID
		End Get
		Set
			If ((Me._CartContentID = value)  _
						= false) Then
				Me.OnCartContentIDChanging(value)
				Me.SendPropertyChanging
				Me._CartContentID = value
				Me.SendPropertyChanged("CartContentID")
				Me.OnCartContentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartID", DbType:="BigInt NOT NULL")>  _
	Public Property CartID() As Long
		Get
			Return Me._CartID
		End Get
		Set
			If ((Me._CartID = value)  _
						= false) Then
				If Me._FR_Cart.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCartIDChanging(value)
				Me.SendPropertyChanging
				Me._CartID = value
				Me.SendPropertyChanged("CartID")
				Me.OnCartIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(200)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>  _
	Public Property Quantity() As Short
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemType", DbType:="SmallInt")>  _
	Public Property ItemType() As System.Nullable(Of Short)
		Get
			Return Me._ItemType
		End Get
		Set
			If (Me._ItemType.Equals(value) = false) Then
				Me.OnItemTypeChanging(value)
				Me.SendPropertyChanging
				Me._ItemType = value
				Me.SendPropertyChanged("ItemType")
				Me.OnItemTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemRef", DbType:="BigInt")>  _
	Public Property ItemRef() As System.Nullable(Of Long)
		Get
			Return Me._ItemRef
		End Get
		Set
			If (Me._ItemRef.Equals(value) = false) Then
				Me.OnItemRefChanging(value)
				Me.SendPropertyChanging
				Me._ItemRef = value
				Me.SendPropertyChanged("ItemRef")
				Me.OnItemRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="Money NOT NULL")>  _
	Public Property Cost() As Decimal
		Get
			Return Me._Cost
		End Get
		Set
			If ((Me._Cost = value)  _
						= false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tax", DbType:="Money")>  _
	Public Property Tax() As System.Nullable(Of Decimal)
		Get
			Return Me._Tax
		End Get
		Set
			If (Me._Tax.Equals(value) = false) Then
				Me.OnTaxChanging(value)
				Me.SendPropertyChanging
				Me._Tax = value
				Me.SendPropertyChanged("Tax")
				Me.OnTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscountAmt", DbType:="Money")>  _
	Public Property DiscountAmt() As System.Nullable(Of Decimal)
		Get
			Return Me._DiscountAmt
		End Get
		Set
			If (Me._DiscountAmt.Equals(value) = false) Then
				Me.OnDiscountAmtChanging(value)
				Me.SendPropertyChanging
				Me._DiscountAmt = value
				Me.SendPropertyChanged("DiscountAmt")
				Me.OnDiscountAmtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscountPercent", DbType:="Float")>  _
	Public Property DiscountPercent() As System.Nullable(Of Double)
		Get
			Return Me._DiscountPercent
		End Get
		Set
			If (Me._DiscountPercent.Equals(value) = false) Then
				Me.OnDiscountPercentChanging(value)
				Me.SendPropertyChanging
				Me._DiscountPercent = value
				Me.SendPropertyChanged("DiscountPercent")
				Me.OnDiscountPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dispatchable", DbType:="Bit NOT NULL")>  _
	Public Property Dispatchable() As Boolean
		Get
			Return Me._Dispatchable
		End Get
		Set
			If ((Me._Dispatchable = value)  _
						= false) Then
				Me.OnDispatchableChanging(value)
				Me.SendPropertyChanging
				Me._Dispatchable = value
				Me.SendPropertyChanged("Dispatchable")
				Me.OnDispatchableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FR_Cart_Content_FR_Donation", Storage:="_FR_Donations", ThisKey:="CartContentID", OtherKey:="CartContentID")>  _
	Public Property FR_Donations() As EntitySet(Of FR_Donation)
		Get
			Return Me._FR_Donations
		End Get
		Set
			Me._FR_Donations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FR_Cart_FR_Cart_Content", Storage:="_FR_Cart", ThisKey:="CartID", OtherKey:="CartID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property FR_Cart() As FR_Cart
		Get
			Return Me._FR_Cart.Entity
		End Get
		Set
			Dim previousValue As FR_Cart = Me._FR_Cart.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FR_Cart.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FR_Cart.Entity = Nothing
					previousValue.FR_Cart_Contents.Remove(Me)
				End If
				Me._FR_Cart.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FR_Cart_Contents.Add(Me)
					Me._CartID = value.CartID
				Else
					Me._CartID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("FR_Cart")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FR_Donations(ByVal entity As FR_Donation)
		Me.SendPropertyChanging
		entity.FR_Cart_Content = Me
	End Sub
	
	Private Sub detach_FR_Donations(ByVal entity As FR_Donation)
		Me.SendPropertyChanging
		entity.FR_Cart_Content = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Staff")>  _
Partial Public Class AP_StaffBroker_Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffId As Integer
	
	Private _DisplayName As String
	
	Private _CostCenter As String
	
	Private _StaffTypeId As System.Nullable(Of Short)
	
	Private _UserId1 As Integer
	
	Private _UserId2 As System.Nullable(Of Integer)
	
	Private _Active As Boolean
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnCostCenterChanging(value As String)
    End Sub
    Partial Private Sub OnCostCenterChanged()
    End Sub
    Partial Private Sub OnStaffTypeIdChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStaffTypeIdChanged()
    End Sub
    Partial Private Sub OnUserId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnUserId1Changed()
    End Sub
    Partial Private Sub OnUserId2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserId2Changed()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffId() As Integer
		Get
			Return Me._StaffId
		End Get
		Set
			If ((Me._StaffId = value)  _
						= false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCenter", DbType:="NVarChar(20)")>  _
	Public Property CostCenter() As String
		Get
			Return Me._CostCenter
		End Get
		Set
			If (String.Equals(Me._CostCenter, value) = false) Then
				Me.OnCostCenterChanging(value)
				Me.SendPropertyChanging
				Me._CostCenter = value
				Me.SendPropertyChanged("CostCenter")
				Me.OnCostCenterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypeId", DbType:="SmallInt")>  _
	Public Property StaffTypeId() As System.Nullable(Of Short)
		Get
			Return Me._StaffTypeId
		End Get
		Set
			If (Me._StaffTypeId.Equals(value) = false) Then
				Me.OnStaffTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffTypeId = value
				Me.SendPropertyChanged("StaffTypeId")
				Me.OnStaffTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId1", DbType:="Int NOT NULL")>  _
	Public Property UserId1() As Integer
		Get
			Return Me._UserId1
		End Get
		Set
			If ((Me._UserId1 = value)  _
						= false) Then
				Me.OnUserId1Changing(value)
				Me.SendPropertyChanging
				Me._UserId1 = value
				Me.SendPropertyChanged("UserId1")
				Me.OnUserId1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId2", DbType:="Int")>  _
	Public Property UserId2() As System.Nullable(Of Integer)
		Get
			Return Me._UserId2
		End Get
		Set
			If (Me._UserId2.Equals(value) = false) Then
				Me.OnUserId2Changing(value)
				Me.SendPropertyChanging
				Me._UserId2 = value
				Me.SendPropertyChanged("UserId2")
				Me.OnUserId2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffId", OtherKey:="StaffId")>  _
	Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me._AP_StaffBroker_StaffProfiles
		End Get
		Set
			Me._AP_StaffBroker_StaffProfiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_Staff = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Departments")>  _
Partial Public Class AP_StaffBroker_Department
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CostCenterId As Integer
	
	Private _Name As String
	
	Private _CostCentre As String
	
	Private _CostCentreManager As System.Nullable(Of Integer)
	
	Private _CostCentreDelegate As System.Nullable(Of Integer)
	
	Private _CanRmb As Boolean
	
	Private _CanCharge As Boolean
	
	Private _CanGiveTo As Boolean
	
	Private _GivingText As String
	
	Private _GivingShortcut As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _PayType As String
	
	Private _IsProject As Boolean
	
	Private _PhotoId As System.Nullable(Of Integer)
	
	Private _Spare1 As String
	
	Private _Spare2 As String
	
	Private _Spare3 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCostCenterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCostCenterIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCostCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCostCentreChanged()
    End Sub
    Partial Private Sub OnCostCentreManagerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCostCentreManagerChanged()
    End Sub
    Partial Private Sub OnCostCentreDelegateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCostCentreDelegateChanged()
    End Sub
    Partial Private Sub OnCanRmbChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanRmbChanged()
    End Sub
    Partial Private Sub OnCanChargeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanChargeChanged()
    End Sub
    Partial Private Sub OnCanGiveToChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanGiveToChanged()
    End Sub
    Partial Private Sub OnGivingTextChanging(value As String)
    End Sub
    Partial Private Sub OnGivingTextChanged()
    End Sub
    Partial Private Sub OnGivingShortcutChanging(value As String)
    End Sub
    Partial Private Sub OnGivingShortcutChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnPayTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPayTypeChanged()
    End Sub
    Partial Private Sub OnIsProjectChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsProjectChanged()
    End Sub
    Partial Private Sub OnPhotoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPhotoIdChanged()
    End Sub
    Partial Private Sub OnSpare1Changing(value As String)
    End Sub
    Partial Private Sub OnSpare1Changed()
    End Sub
    Partial Private Sub OnSpare2Changing(value As String)
    End Sub
    Partial Private Sub OnSpare2Changed()
    End Sub
    Partial Private Sub OnSpare3Changing(value As String)
    End Sub
    Partial Private Sub OnSpare3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCenterId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CostCenterId() As Integer
		Get
			Return Me._CostCenterId
		End Get
		Set
			If ((Me._CostCenterId = value)  _
						= false) Then
				Me.OnCostCenterIdChanging(value)
				Me.SendPropertyChanging
				Me._CostCenterId = value
				Me.SendPropertyChanged("CostCenterId")
				Me.OnCostCenterIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentre", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CostCentre() As String
		Get
			Return Me._CostCentre
		End Get
		Set
			If (String.Equals(Me._CostCentre, value) = false) Then
				Me.OnCostCentreChanging(value)
				Me.SendPropertyChanging
				Me._CostCentre = value
				Me.SendPropertyChanged("CostCentre")
				Me.OnCostCentreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentreManager", DbType:="Int")>  _
	Public Property CostCentreManager() As System.Nullable(Of Integer)
		Get
			Return Me._CostCentreManager
		End Get
		Set
			If (Me._CostCentreManager.Equals(value) = false) Then
				Me.OnCostCentreManagerChanging(value)
				Me.SendPropertyChanging
				Me._CostCentreManager = value
				Me.SendPropertyChanged("CostCentreManager")
				Me.OnCostCentreManagerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCentreDelegate", DbType:="Int")>  _
	Public Property CostCentreDelegate() As System.Nullable(Of Integer)
		Get
			Return Me._CostCentreDelegate
		End Get
		Set
			If (Me._CostCentreDelegate.Equals(value) = false) Then
				Me.OnCostCentreDelegateChanging(value)
				Me.SendPropertyChanging
				Me._CostCentreDelegate = value
				Me.SendPropertyChanged("CostCentreDelegate")
				Me.OnCostCentreDelegateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanRmb", DbType:="Bit NOT NULL")>  _
	Public Property CanRmb() As Boolean
		Get
			Return Me._CanRmb
		End Get
		Set
			If ((Me._CanRmb = value)  _
						= false) Then
				Me.OnCanRmbChanging(value)
				Me.SendPropertyChanging
				Me._CanRmb = value
				Me.SendPropertyChanged("CanRmb")
				Me.OnCanRmbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanCharge", DbType:="Bit NOT NULL")>  _
	Public Property CanCharge() As Boolean
		Get
			Return Me._CanCharge
		End Get
		Set
			If ((Me._CanCharge = value)  _
						= false) Then
				Me.OnCanChargeChanging(value)
				Me.SendPropertyChanging
				Me._CanCharge = value
				Me.SendPropertyChanged("CanCharge")
				Me.OnCanChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanGiveTo", DbType:="Bit NOT NULL")>  _
	Public Property CanGiveTo() As Boolean
		Get
			Return Me._CanGiveTo
		End Get
		Set
			If ((Me._CanGiveTo = value)  _
						= false) Then
				Me.OnCanGiveToChanging(value)
				Me.SendPropertyChanging
				Me._CanGiveTo = value
				Me.SendPropertyChanged("CanGiveTo")
				Me.OnCanGiveToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GivingText", DbType:="NVarChar(MAX)")>  _
	Public Property GivingText() As String
		Get
			Return Me._GivingText
		End Get
		Set
			If (String.Equals(Me._GivingText, value) = false) Then
				Me.OnGivingTextChanging(value)
				Me.SendPropertyChanging
				Me._GivingText = value
				Me.SendPropertyChanged("GivingText")
				Me.OnGivingTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GivingShortcut", DbType:="NVarChar(50)")>  _
	Public Property GivingShortcut() As String
		Get
			Return Me._GivingShortcut
		End Get
		Set
			If (String.Equals(Me._GivingShortcut, value) = false) Then
				Me.OnGivingShortcutChanging(value)
				Me.SendPropertyChanging
				Me._GivingShortcut = value
				Me.SendPropertyChanged("GivingShortcut")
				Me.OnGivingShortcutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PayType", DbType:="NVarChar(MAX)")>  _
	Public Property PayType() As String
		Get
			Return Me._PayType
		End Get
		Set
			If (String.Equals(Me._PayType, value) = false) Then
				Me.OnPayTypeChanging(value)
				Me.SendPropertyChanging
				Me._PayType = value
				Me.SendPropertyChanged("PayType")
				Me.OnPayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsProject", DbType:="Bit NOT NULL")>  _
	Public Property IsProject() As Boolean
		Get
			Return Me._IsProject
		End Get
		Set
			If ((Me._IsProject = value)  _
						= false) Then
				Me.OnIsProjectChanging(value)
				Me.SendPropertyChanging
				Me._IsProject = value
				Me.SendPropertyChanged("IsProject")
				Me.OnIsProjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoId", DbType:="Int")>  _
	Public Property PhotoId() As System.Nullable(Of Integer)
		Get
			Return Me._PhotoId
		End Get
		Set
			If (Me._PhotoId.Equals(value) = false) Then
				Me.OnPhotoIdChanging(value)
				Me.SendPropertyChanging
				Me._PhotoId = value
				Me.SendPropertyChanged("PhotoId")
				Me.OnPhotoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Spare1", DbType:="NVarChar(50)")>  _
	Public Property Spare1() As String
		Get
			Return Me._Spare1
		End Get
		Set
			If (String.Equals(Me._Spare1, value) = false) Then
				Me.OnSpare1Changing(value)
				Me.SendPropertyChanging
				Me._Spare1 = value
				Me.SendPropertyChanged("Spare1")
				Me.OnSpare1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Spare2", DbType:="NVarChar(MAX)")>  _
	Public Property Spare2() As String
		Get
			Return Me._Spare2
		End Get
		Set
			If (String.Equals(Me._Spare2, value) = false) Then
				Me.OnSpare2Changing(value)
				Me.SendPropertyChanging
				Me._Spare2 = value
				Me.SendPropertyChanged("Spare2")
				Me.OnSpare2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Spare3", DbType:="NVarChar(MAX)")>  _
	Public Property Spare3() As String
		Get
			Return Me._Spare3
		End Get
		Set
			If (String.Equals(Me._Spare3, value) = false) Then
				Me.OnSpare3Changing(value)
				Me.SendPropertyChanging
				Me._Spare3 = value
				Me.SendPropertyChanged("Spare3")
				Me.OnSpare3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffProfile")>  _
Partial Public Class AP_StaffBroker_StaffProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffProfileId As Long
	
	Private _PropertyValue As String
	
	Private _StaffPropertyDefinitionId As Integer
	
	Private _StaffId As Integer
	
	Private _AP_StaffBroker_Staff As EntityRef(Of AP_StaffBroker_Staff)
	
	Private _AP_StaffBroker_StaffPropertyDefinition As EntityRef(Of AP_StaffBroker_StaffPropertyDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffProfileIdChanging(value As Long)
    End Sub
    Partial Private Sub OnStaffProfileIdChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_Staff = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
		Me._AP_StaffBroker_StaffPropertyDefinition = CType(Nothing, EntityRef(Of AP_StaffBroker_StaffPropertyDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffProfileId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffProfileId() As Long
		Get
			Return Me._StaffProfileId
		End Get
		Set
			If ((Me._StaffProfileId = value)  _
						= false) Then
				Me.OnStaffProfileIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffProfileId = value
				Me.SendPropertyChanged("StaffProfileId")
				Me.OnStaffProfileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(MAX)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", DbType:="Int NOT NULL")>  _
	Public Property StaffPropertyDefinitionId() As Integer
		Get
			Return Me._StaffPropertyDefinitionId
		End Get
		Set
			If ((Me._StaffPropertyDefinitionId = value)  _
						= false) Then
				If Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffPropertyDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffPropertyDefinitionId = value
				Me.SendPropertyChanged("StaffPropertyDefinitionId")
				Me.OnStaffPropertyDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")>  _
	Public Property StaffId() As Integer
		Get
			Return Me._StaffId
		End Get
		Set
			If ((Me._StaffId = value)  _
						= false) Then
				If Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_Staff", ThisKey:="StaffId", OtherKey:="StaffId", IsForeignKey:=true)>  _
	Public Property AP_StaffBroker_Staff() As AP_StaffBroker_Staff
		Get
			Return Me._AP_StaffBroker_Staff.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_Staff.Entity = Nothing
					previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
				End If
				Me._AP_StaffBroker_Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_StaffProfiles.Add(Me)
					Me._StaffId = value.StaffId
				Else
					Me._StaffId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_StaffBroker_Staff")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffPropertyDefinition", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId", IsForeignKey:=true)>  _
	Public Property AP_StaffBroker_StaffPropertyDefinition() As AP_StaffBroker_StaffPropertyDefinition
		Get
			Return Me._AP_StaffBroker_StaffPropertyDefinition.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_StaffPropertyDefinition = Me._AP_StaffBroker_StaffPropertyDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_StaffPropertyDefinition.Entity = Nothing
					previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
				End If
				Me._AP_StaffBroker_StaffPropertyDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_StaffProfiles.Add(Me)
					Me._StaffPropertyDefinitionId = value.StaffPropertyDefinitionId
				Else
					Me._StaffPropertyDefinitionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_StaffBroker_StaffPropertyDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffPropertyDefinition")>  _
Partial Public Class AP_StaffBroker_StaffPropertyDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffPropertyDefinitionId As Integer
	
	Private _PropertyName As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _ViewOrder As System.Nullable(Of Short)
	
	Private _Display As System.Nullable(Of Boolean)
	
	Private _PropertyHelp As String
	
	Private _Type As System.Nullable(Of Byte)
	
	Private _FixedFieldName As String
	
	Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnDisplayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDisplayChanged()
    End Sub
    Partial Private Sub OnPropertyHelpChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyHelpChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnFixedFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFixedFieldNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffPropertyDefinitionId() As Integer
		Get
			Return Me._StaffPropertyDefinitionId
		End Get
		Set
			If ((Me._StaffPropertyDefinitionId = value)  _
						= false) Then
				Me.OnStaffPropertyDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffPropertyDefinitionId = value
				Me.SendPropertyChanged("StaffPropertyDefinitionId")
				Me.OnStaffPropertyDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="SmallInt")>  _
	Public Property ViewOrder() As System.Nullable(Of Short)
		Get
			Return Me._ViewOrder
		End Get
		Set
			If (Me._ViewOrder.Equals(value) = false) Then
				Me.OnViewOrderChanging(value)
				Me.SendPropertyChanging
				Me._ViewOrder = value
				Me.SendPropertyChanged("ViewOrder")
				Me.OnViewOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Display", DbType:="Bit")>  _
	Public Property Display() As System.Nullable(Of Boolean)
		Get
			Return Me._Display
		End Get
		Set
			If (Me._Display.Equals(value) = false) Then
				Me.OnDisplayChanging(value)
				Me.SendPropertyChanging
				Me._Display = value
				Me.SendPropertyChanged("Display")
				Me.OnDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyHelp", DbType:="VarChar(MAX)")>  _
	Public Property PropertyHelp() As String
		Get
			Return Me._PropertyHelp
		End Get
		Set
			If (String.Equals(Me._PropertyHelp, value) = false) Then
				Me.OnPropertyHelpChanging(value)
				Me.SendPropertyChanging
				Me._PropertyHelp = value
				Me.SendPropertyChanged("PropertyHelp")
				Me.OnPropertyHelpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="TinyInt")>  _
	Public Property Type() As System.Nullable(Of Byte)
		Get
			Return Me._Type
		End Get
		Set
			If (Me._Type.Equals(value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixedFieldName", DbType:="NVarChar(100)")>  _
	Public Property FixedFieldName() As String
		Get
			Return Me._FixedFieldName
		End Get
		Set
			If (String.Equals(Me._FixedFieldName, value) = false) Then
				Me.OnFixedFieldNameChanging(value)
				Me.SendPropertyChanging
				Me._FixedFieldName = value
				Me.SendPropertyChanged("FixedFieldName")
				Me.OnFixedFieldNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId")>  _
	Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me._AP_StaffBroker_StaffProfiles
		End Get
		Set
			Me._AP_StaffBroker_StaffProfiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffPropertyDefinition = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffPropertyDefinition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _Username As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _IsSuperUser As Boolean
	
	Private _AffiliateId As System.Nullable(Of Integer)
	
	Private _Email As String
	
	Private _DisplayName As String
	
	Private _UpdatePassword As Boolean
	
	Private _LastIPAddress As String
	
	Private _IsDeleted As Boolean
	
	Private _CreatedByUserID As System.Nullable(Of Integer)
	
	Private _CreatedOnDate As System.Nullable(Of Date)
	
	Private _LastModifiedByUserID As System.Nullable(Of Integer)
	
	Private _LastModifiedOnDate As System.Nullable(Of Date)
	
	Private _FR_Carts As EntityRef(Of FR_Cart)
	
	Private _UserProfiles As EntitySet(Of UserProfile)
	
	Private _Agape_Give_BankTransfers As EntityRef(Of Agape_Give_BankTransfer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIsSuperUserChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSuperUserChanged()
    End Sub
    Partial Private Sub OnAffiliateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAffiliateIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnUpdatePasswordChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUpdatePasswordChanged()
    End Sub
    Partial Private Sub OnLastIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnLastIPAddressChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreatedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatedByUserIDChanged()
    End Sub
    Partial Private Sub OnCreatedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedOnDateChanged()
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanged()
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FR_Carts = CType(Nothing, EntityRef(Of FR_Cart))
		Me._UserProfiles = New EntitySet(Of UserProfile)(AddressOf Me.attach_UserProfiles, AddressOf Me.detach_UserProfiles)
		Me._Agape_Give_BankTransfers = CType(Nothing, EntityRef(Of Agape_Give_BankTransfer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSuperUser", DbType:="Bit NOT NULL")>  _
	Public Property IsSuperUser() As Boolean
		Get
			Return Me._IsSuperUser
		End Get
		Set
			If ((Me._IsSuperUser = value)  _
						= false) Then
				Me.OnIsSuperUserChanging(value)
				Me.SendPropertyChanging
				Me._IsSuperUser = value
				Me.SendPropertyChanged("IsSuperUser")
				Me.OnIsSuperUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AffiliateId", DbType:="Int")>  _
	Public Property AffiliateId() As System.Nullable(Of Integer)
		Get
			Return Me._AffiliateId
		End Get
		Set
			If (Me._AffiliateId.Equals(value) = false) Then
				Me.OnAffiliateIdChanging(value)
				Me.SendPropertyChanging
				Me._AffiliateId = value
				Me.SendPropertyChanged("AffiliateId")
				Me.OnAffiliateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatePassword", DbType:="Bit NOT NULL")>  _
	Public Property UpdatePassword() As Boolean
		Get
			Return Me._UpdatePassword
		End Get
		Set
			If ((Me._UpdatePassword = value)  _
						= false) Then
				Me.OnUpdatePasswordChanging(value)
				Me.SendPropertyChanging
				Me._UpdatePassword = value
				Me.SendPropertyChanged("UpdatePassword")
				Me.OnUpdatePasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastIPAddress", DbType:="NVarChar(50)")>  _
	Public Property LastIPAddress() As String
		Get
			Return Me._LastIPAddress
		End Get
		Set
			If (String.Equals(Me._LastIPAddress, value) = false) Then
				Me.OnLastIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._LastIPAddress = value
				Me.SendPropertyChanged("LastIPAddress")
				Me.OnLastIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUserID", DbType:="Int")>  _
	Public Property CreatedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedByUserID
		End Get
		Set
			If (Me._CreatedByUserID.Equals(value) = false) Then
				Me.OnCreatedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUserID = value
				Me.SendPropertyChanged("CreatedByUserID")
				Me.OnCreatedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOnDate", DbType:="DateTime")>  _
	Public Property CreatedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOnDate
		End Get
		Set
			If (Me._CreatedOnDate.Equals(value) = false) Then
				Me.OnCreatedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOnDate = value
				Me.SendPropertyChanged("CreatedOnDate")
				Me.OnCreatedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedByUserID", DbType:="Int")>  _
	Public Property LastModifiedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._LastModifiedByUserID
		End Get
		Set
			If (Me._LastModifiedByUserID.Equals(value) = false) Then
				Me.OnLastModifiedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedByUserID = value
				Me.SendPropertyChanged("LastModifiedByUserID")
				Me.OnLastModifiedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedOnDate", DbType:="DateTime")>  _
	Public Property LastModifiedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedOnDate
		End Get
		Set
			If (Me._LastModifiedOnDate.Equals(value) = false) Then
				Me.OnLastModifiedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedOnDate = value
				Me.SendPropertyChanged("LastModifiedOnDate")
				Me.OnLastModifiedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_FR_Cart", Storage:="_FR_Carts", ThisKey:="UserID", OtherKey:="UserID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property FR_Carts() As FR_Cart
		Get
			Return Me._FR_Carts.Entity
		End Get
		Set
			Dim previousValue As FR_Cart = Me._FR_Carts.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FR_Carts.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FR_Carts.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._FR_Carts.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("FR_Carts")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserProfile", Storage:="_UserProfiles", ThisKey:="UserID", OtherKey:="UserID")>  _
	Public Property UserProfiles() As EntitySet(Of UserProfile)
		Get
			Return Me._UserProfiles
		End Get
		Set
			Me._UserProfiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Agape_Give_BankTransfer", Storage:="_Agape_Give_BankTransfers", ThisKey:="UserID", OtherKey:="DonorId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Agape_Give_BankTransfers() As Agape_Give_BankTransfer
		Get
			Return Me._Agape_Give_BankTransfers.Entity
		End Get
		Set
			Dim previousValue As Agape_Give_BankTransfer = Me._Agape_Give_BankTransfers.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Agape_Give_BankTransfers.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Agape_Give_BankTransfers.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._Agape_Give_BankTransfers.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("Agape_Give_BankTransfers")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserProfile")>  _
Partial Public Class UserProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProfileID As Integer
	
	Private _UserID As Integer
	
	Private _PropertyDefinitionID As Integer
	
	Private _PropertyValue As String
	
	Private _PropertyText As String
	
	Private _Visibility As Integer
	
	Private _LastUpdatedDate As Date
	
	Private _ExtendedVisibility As String
	
	Private _User As EntityRef(Of User)
	
	Private _ProfilePropertyDefinition As EntityRef(Of ProfilePropertyDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProfileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProfileIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    Partial Private Sub OnPropertyTextChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyTextChanged()
    End Sub
    Partial Private Sub OnVisibilityChanging(value As Integer)
    End Sub
    Partial Private Sub OnVisibilityChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    Partial Private Sub OnExtendedVisibilityChanging(value As String)
    End Sub
    Partial Private Sub OnExtendedVisibilityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._ProfilePropertyDefinition = CType(Nothing, EntityRef(Of ProfilePropertyDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProfileID() As Integer
		Get
			Return Me._ProfileID
		End Get
		Set
			If ((Me._ProfileID = value)  _
						= false) Then
				Me.OnProfileIDChanging(value)
				Me.SendPropertyChanging
				Me._ProfileID = value
				Me.SendPropertyChanged("ProfileID")
				Me.OnProfileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyDefinitionID", DbType:="Int NOT NULL")>  _
	Public Property PropertyDefinitionID() As Integer
		Get
			Return Me._PropertyDefinitionID
		End Get
		Set
			If ((Me._PropertyDefinitionID = value)  _
						= false) Then
				If Me._ProfilePropertyDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPropertyDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._PropertyDefinitionID = value
				Me.SendPropertyChanged("PropertyDefinitionID")
				Me.OnPropertyDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="NVarChar(3750)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyText", DbType:="NVarChar(MAX)")>  _
	Public Property PropertyText() As String
		Get
			Return Me._PropertyText
		End Get
		Set
			If (String.Equals(Me._PropertyText, value) = false) Then
				Me.OnPropertyTextChanging(value)
				Me.SendPropertyChanging
				Me._PropertyText = value
				Me.SendPropertyChanged("PropertyText")
				Me.OnPropertyTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visibility", DbType:="Int NOT NULL")>  _
	Public Property Visibility() As Integer
		Get
			Return Me._Visibility
		End Get
		Set
			If ((Me._Visibility = value)  _
						= false) Then
				Me.OnVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._Visibility = value
				Me.SendPropertyChanged("Visibility")
				Me.OnVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtendedVisibility", DbType:="VarChar(400)")>  _
	Public Property ExtendedVisibility() As String
		Get
			Return Me._ExtendedVisibility
		End Get
		Set
			If (String.Equals(Me._ExtendedVisibility, value) = false) Then
				Me.OnExtendedVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._ExtendedVisibility = value
				Me.SendPropertyChanged("ExtendedVisibility")
				Me.OnExtendedVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserProfile", Storage:="_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.UserProfiles.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserProfiles.Add(Me)
					Me._UserID = value.UserID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProfilePropertyDefinition_UserProfile", Storage:="_ProfilePropertyDefinition", ThisKey:="PropertyDefinitionID", OtherKey:="PropertyDefinitionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ProfilePropertyDefinition() As ProfilePropertyDefinition
		Get
			Return Me._ProfilePropertyDefinition.Entity
		End Get
		Set
			Dim previousValue As ProfilePropertyDefinition = Me._ProfilePropertyDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProfilePropertyDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProfilePropertyDefinition.Entity = Nothing
					previousValue.UserProfiles.Remove(Me)
				End If
				Me._ProfilePropertyDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserProfiles.Add(Me)
					Me._PropertyDefinitionID = value.PropertyDefinitionID
				Else
					Me._PropertyDefinitionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProfilePropertyDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProfilePropertyDefinition")>  _
Partial Public Class ProfilePropertyDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PropertyDefinitionID As Integer
	
	Private _PortalID As System.Nullable(Of Integer)
	
	Private _ModuleDefID As System.Nullable(Of Integer)
	
	Private _Deleted As Boolean
	
	Private _DataType As Integer
	
	Private _DefaultValue As String
	
	Private _PropertyCategory As String
	
	Private _PropertyName As String
	
	Private _Length As Integer
	
	Private _Required As Boolean
	
	Private _ValidationExpression As String
	
	Private _ViewOrder As Integer
	
	Private _Visible As Boolean
	
	Private _CreatedByUserID As System.Nullable(Of Integer)
	
	Private _CreatedOnDate As System.Nullable(Of Date)
	
	Private _LastModifiedByUserID As System.Nullable(Of Integer)
	
	Private _LastModifiedOnDate As System.Nullable(Of Date)
	
	Private _DefaultVisibility As System.Nullable(Of Integer)
	
	Private _ReadOnly As Boolean
	
	Private _UserProfiles As EntitySet(Of UserProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnModuleDefIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleDefIDChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    Partial Private Sub OnDataTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeChanged()
    End Sub
    Partial Private Sub OnDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultValueChanged()
    End Sub
    Partial Private Sub OnPropertyCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyCategoryChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnLengthChanging(value As Integer)
    End Sub
    Partial Private Sub OnLengthChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    Partial Private Sub OnValidationExpressionChanging(value As String)
    End Sub
    Partial Private Sub OnValidationExpressionChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnCreatedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatedByUserIDChanged()
    End Sub
    Partial Private Sub OnCreatedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedOnDateChanged()
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanged()
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanged()
    End Sub
    Partial Private Sub OnDefaultVisibilityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefaultVisibilityChanged()
    End Sub
    Partial Private Sub OnReadOnlyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReadOnlyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserProfiles = New EntitySet(Of UserProfile)(AddressOf Me.attach_UserProfiles, AddressOf Me.detach_UserProfiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyDefinitionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PropertyDefinitionID() As Integer
		Get
			Return Me._PropertyDefinitionID
		End Get
		Set
			If ((Me._PropertyDefinitionID = value)  _
						= false) Then
				Me.OnPropertyDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._PropertyDefinitionID = value
				Me.SendPropertyChanged("PropertyDefinitionID")
				Me.OnPropertyDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int")>  _
	Public Property PortalID() As System.Nullable(Of Integer)
		Get
			Return Me._PortalID
		End Get
		Set
			If (Me._PortalID.Equals(value) = false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefID", DbType:="Int")>  _
	Public Property ModuleDefID() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleDefID
		End Get
		Set
			If (Me._ModuleDefID.Equals(value) = false) Then
				Me.OnModuleDefIDChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefID = value
				Me.SendPropertyChanged("ModuleDefID")
				Me.OnModuleDefIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit NOT NULL")>  _
	Public Property Deleted() As Boolean
		Get
			Return Me._Deleted
		End Get
		Set
			If ((Me._Deleted = value)  _
						= false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataType", DbType:="Int NOT NULL")>  _
	Public Property DataType() As Integer
		Get
			Return Me._DataType
		End Get
		Set
			If ((Me._DataType = value)  _
						= false) Then
				Me.OnDataTypeChanging(value)
				Me.SendPropertyChanging
				Me._DataType = value
				Me.SendPropertyChanged("DataType")
				Me.OnDataTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultValue", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DefaultValue() As String
		Get
			Return Me._DefaultValue
		End Get
		Set
			If (String.Equals(Me._DefaultValue, value) = false) Then
				Me.OnDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._DefaultValue = value
				Me.SendPropertyChanged("DefaultValue")
				Me.OnDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyCategory", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyCategory() As String
		Get
			Return Me._PropertyCategory
		End Get
		Set
			If (String.Equals(Me._PropertyCategory, value) = false) Then
				Me.OnPropertyCategoryChanging(value)
				Me.SendPropertyChanging
				Me._PropertyCategory = value
				Me.SendPropertyChanged("PropertyCategory")
				Me.OnPropertyCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Length", DbType:="Int NOT NULL")>  _
	Public Property Length() As Integer
		Get
			Return Me._Length
		End Get
		Set
			If ((Me._Length = value)  _
						= false) Then
				Me.OnLengthChanging(value)
				Me.SendPropertyChanging
				Me._Length = value
				Me.SendPropertyChanged("Length")
				Me.OnLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit NOT NULL")>  _
	Public Property Required() As Boolean
		Get
			Return Me._Required
		End Get
		Set
			If ((Me._Required = value)  _
						= false) Then
				Me.OnRequiredChanging(value)
				Me.SendPropertyChanging
				Me._Required = value
				Me.SendPropertyChanged("Required")
				Me.OnRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidationExpression", DbType:="NVarChar(2000)")>  _
	Public Property ValidationExpression() As String
		Get
			Return Me._ValidationExpression
		End Get
		Set
			If (String.Equals(Me._ValidationExpression, value) = false) Then
				Me.OnValidationExpressionChanging(value)
				Me.SendPropertyChanging
				Me._ValidationExpression = value
				Me.SendPropertyChanged("ValidationExpression")
				Me.OnValidationExpressionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="Int NOT NULL")>  _
	Public Property ViewOrder() As Integer
		Get
			Return Me._ViewOrder
		End Get
		Set
			If ((Me._ViewOrder = value)  _
						= false) Then
				Me.OnViewOrderChanging(value)
				Me.SendPropertyChanging
				Me._ViewOrder = value
				Me.SendPropertyChanged("ViewOrder")
				Me.OnViewOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit NOT NULL")>  _
	Public Property Visible() As Boolean
		Get
			Return Me._Visible
		End Get
		Set
			If ((Me._Visible = value)  _
						= false) Then
				Me.OnVisibleChanging(value)
				Me.SendPropertyChanging
				Me._Visible = value
				Me.SendPropertyChanged("Visible")
				Me.OnVisibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUserID", DbType:="Int")>  _
	Public Property CreatedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedByUserID
		End Get
		Set
			If (Me._CreatedByUserID.Equals(value) = false) Then
				Me.OnCreatedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUserID = value
				Me.SendPropertyChanged("CreatedByUserID")
				Me.OnCreatedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOnDate", DbType:="DateTime")>  _
	Public Property CreatedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOnDate
		End Get
		Set
			If (Me._CreatedOnDate.Equals(value) = false) Then
				Me.OnCreatedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOnDate = value
				Me.SendPropertyChanged("CreatedOnDate")
				Me.OnCreatedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedByUserID", DbType:="Int")>  _
	Public Property LastModifiedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._LastModifiedByUserID
		End Get
		Set
			If (Me._LastModifiedByUserID.Equals(value) = false) Then
				Me.OnLastModifiedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedByUserID = value
				Me.SendPropertyChanged("LastModifiedByUserID")
				Me.OnLastModifiedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedOnDate", DbType:="DateTime")>  _
	Public Property LastModifiedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedOnDate
		End Get
		Set
			If (Me._LastModifiedOnDate.Equals(value) = false) Then
				Me.OnLastModifiedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedOnDate = value
				Me.SendPropertyChanged("LastModifiedOnDate")
				Me.OnLastModifiedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultVisibility", DbType:="Int")>  _
	Public Property DefaultVisibility() As System.Nullable(Of Integer)
		Get
			Return Me._DefaultVisibility
		End Get
		Set
			If (Me._DefaultVisibility.Equals(value) = false) Then
				Me.OnDefaultVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._DefaultVisibility = value
				Me.SendPropertyChanged("DefaultVisibility")
				Me.OnDefaultVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="ReadOnly", Storage:="_ReadOnly", DbType:="Bit NOT NULL")>  _
	Public Property [ReadOnly]() As Boolean
		Get
			Return Me._ReadOnly
		End Get
		Set
			If ((Me._ReadOnly = value)  _
						= false) Then
				Me.OnReadOnlyChanging(value)
				Me.SendPropertyChanging
				Me._ReadOnly = value
				Me.SendPropertyChanged("[ReadOnly]")
				Me.OnReadOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProfilePropertyDefinition_UserProfile", Storage:="_UserProfiles", ThisKey:="PropertyDefinitionID", OtherKey:="PropertyDefinitionID")>  _
	Public Property UserProfiles() As EntitySet(Of UserProfile)
		Get
			Return Me._UserProfiles
		End Get
		Set
			Me._UserProfiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.ProfilePropertyDefinition = Me
	End Sub
	
	Private Sub detach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.ProfilePropertyDefinition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Give_BankTransfer")>  _
Partial Public Class Agape_Give_BankTransfer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VirId As Integer
	
	Private _DonorId As System.Nullable(Of Integer)
	
	Private _acNo As String
	
	Private _Frequency As System.Nullable(Of Short)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _Amount As System.Nullable(Of Short)
	
	Private _GiveMessage As String
	
	Private _Reference As String
	
	Private _Status As System.Nullable(Of Byte)
	
	Private _DonationType As System.Nullable(Of Byte)
	
	Private _TypeId As System.Nullable(Of Integer)
	
	Private _SetupDate As System.Nullable(Of Date)
	
	Private _GiveMethod As System.Nullable(Of Byte)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVirIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVirIdChanged()
    End Sub
    Partial Private Sub OnDonorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDonorIdChanged()
    End Sub
    Partial Private Sub OnacNoChanging(value As String)
    End Sub
    Partial Private Sub OnacNoChanged()
    End Sub
    Partial Private Sub OnFrequencyChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFrequencyChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnGiveMessageChanging(value As String)
    End Sub
    Partial Private Sub OnGiveMessageChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnDonationTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDonationTypeChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnSetupDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSetupDateChanged()
    End Sub
    Partial Private Sub OnGiveMethodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnGiveMethodChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VirId() As Integer
		Get
			Return Me._VirId
		End Get
		Set
			If ((Me._VirId = value)  _
						= false) Then
				Me.OnVirIdChanging(value)
				Me.SendPropertyChanging
				Me._VirId = value
				Me.SendPropertyChanged("VirId")
				Me.OnVirIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", DbType:="Int")>  _
	Public Property DonorId() As System.Nullable(Of Integer)
		Get
			Return Me._DonorId
		End Get
		Set
			If (Me._DonorId.Equals(value) = false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDonorIdChanging(value)
				Me.SendPropertyChanging
				Me._DonorId = value
				Me.SendPropertyChanged("DonorId")
				Me.OnDonorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acNo", DbType:="NVarChar(100)")>  _
	Public Property acNo() As String
		Get
			Return Me._acNo
		End Get
		Set
			If (String.Equals(Me._acNo, value) = false) Then
				Me.OnacNoChanging(value)
				Me.SendPropertyChanging
				Me._acNo = value
				Me.SendPropertyChanged("acNo")
				Me.OnacNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="SmallInt")>  _
	Public Property Frequency() As System.Nullable(Of Short)
		Get
			Return Me._Frequency
		End Get
		Set
			If (Me._Frequency.Equals(value) = false) Then
				Me.OnFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._Frequency = value
				Me.SendPropertyChanged("Frequency")
				Me.OnFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="SmallInt")>  _
	Public Property Amount() As System.Nullable(Of Short)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMessage", DbType:="NVarChar(MAX)")>  _
	Public Property GiveMessage() As String
		Get
			Return Me._GiveMessage
		End Get
		Set
			If (String.Equals(Me._GiveMessage, value) = false) Then
				Me.OnGiveMessageChanging(value)
				Me.SendPropertyChanging
				Me._GiveMessage = value
				Me.SendPropertyChanged("GiveMessage")
				Me.OnGiveMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt")>  _
	Public Property Status() As System.Nullable(Of Byte)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationType", DbType:="TinyInt")>  _
	Public Property DonationType() As System.Nullable(Of Byte)
		Get
			Return Me._DonationType
		End Get
		Set
			If (Me._DonationType.Equals(value) = false) Then
				Me.OnDonationTypeChanging(value)
				Me.SendPropertyChanging
				Me._DonationType = value
				Me.SendPropertyChanged("DonationType")
				Me.OnDonationTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
	Public Property TypeId() As System.Nullable(Of Integer)
		Get
			Return Me._TypeId
		End Get
		Set
			If (Me._TypeId.Equals(value) = false) Then
				Me.OnTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeId = value
				Me.SendPropertyChanged("TypeId")
				Me.OnTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SetupDate", DbType:="DateTime")>  _
	Public Property SetupDate() As System.Nullable(Of Date)
		Get
			Return Me._SetupDate
		End Get
		Set
			If (Me._SetupDate.Equals(value) = false) Then
				Me.OnSetupDateChanging(value)
				Me.SendPropertyChanging
				Me._SetupDate = value
				Me.SendPropertyChanged("SetupDate")
				Me.OnSetupDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMethod", DbType:="TinyInt")>  _
	Public Property GiveMethod() As System.Nullable(Of Byte)
		Get
			Return Me._GiveMethod
		End Get
		Set
			If (Me._GiveMethod.Equals(value) = false) Then
				Me.OnGiveMethodChanging(value)
				Me.SendPropertyChanging
				Me._GiveMethod = value
				Me.SendPropertyChanged("GiveMethod")
				Me.OnGiveMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Agape_Give_BankTransfer", Storage:="_User", ThisKey:="DonorId", OtherKey:="UserID", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Agape_Give_BankTransfers = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Agape_Give_BankTransfers = Me
					Me._DonorId = value.UserID
				Else
					Me._DonorId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Settings")>  _
Partial Public Class AP_StaffBroker_Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingId As Integer
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSettingIdChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SettingId() As Integer
		Get
			Return Me._SettingId
		End Get
		Set
			If ((Me._SettingId = value)  _
						= false) Then
				Me.OnSettingIdChanging(value)
				Me.SendPropertyChanging
				Me._SettingId = value
				Me.SendPropertyChanged("SettingId")
				Me.OnSettingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50)")>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="NVarChar(MAX)")>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
